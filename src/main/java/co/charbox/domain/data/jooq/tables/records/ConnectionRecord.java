/**
 * This class is generated by jOOQ
 */
package co.charbox.domain.data.jooq.tables.records;


import co.charbox.domain.data.jooq.tables.Connection;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConnectionRecord extends UpdatableRecordImpl<ConnectionRecord> implements Record4<Integer, String, String, Double> {

	private static final long serialVersionUID = -1347460001;

	/**
	 * Setter for <code>charbot_0_1_0.connection.id</code>.
	 */
	public void setId(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>charbot_0_1_0.connection.id</code>.
	 */
	public Integer getId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>charbot_0_1_0.connection.isp</code>.
	 */
	public void setIsp(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>charbot_0_1_0.connection.isp</code>.
	 */
	public String getIsp() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>charbot_0_1_0.connection.ip</code>.
	 */
	public void setIp(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>charbot_0_1_0.connection.ip</code>.
	 */
	public String getIp() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>charbot_0_1_0.connection.exp_speed</code>.
	 */
	public void setExpSpeed(Double value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>charbot_0_1_0.connection.exp_speed</code>.
	 */
	public Double getExpSpeed() {
		return (Double) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, String, Double> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<Integer, String, String, Double> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Connection.CONNECTION.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Connection.CONNECTION.ISP;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Connection.CONNECTION.IP;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Double> field4() {
		return Connection.CONNECTION.EXP_SPEED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getIsp();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getIp();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Double value4() {
		return getExpSpeed();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectionRecord value1(Integer value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectionRecord value2(String value) {
		setIsp(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectionRecord value3(String value) {
		setIp(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectionRecord value4(Double value) {
		setExpSpeed(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ConnectionRecord values(Integer value1, String value2, String value3, Double value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ConnectionRecord
	 */
	public ConnectionRecord() {
		super(Connection.CONNECTION);
	}

	/**
	 * Create a detached, initialised ConnectionRecord
	 */
	public ConnectionRecord(Integer id, String isp, String ip, Double expSpeed) {
		super(Connection.CONNECTION);

		setValue(0, id);
		setValue(1, isp);
		setValue(2, ip);
		setValue(3, expSpeed);
	}
}
