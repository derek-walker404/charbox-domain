/**
 * This class is generated by jOOQ
 */
package co.charbox.domain.data.jooq.tables;


import co.charbox.domain.data.jooq.Charbot_0_1_0;
import co.charbox.domain.data.jooq.Keys;
import co.charbox.domain.data.jooq.tables.records.ConnectionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Connection extends TableImpl<ConnectionRecord> {

	private static final long serialVersionUID = -1793303933;

	/**
	 * The reference instance of <code>charbot_0_1_0.connection</code>
	 */
	public static final Connection CONNECTION = new Connection();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ConnectionRecord> getRecordType() {
		return ConnectionRecord.class;
	}

	/**
	 * The column <code>charbot_0_1_0.connection.id</code>.
	 */
	public final TableField<ConnectionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>charbot_0_1_0.connection.isp</code>.
	 */
	public final TableField<ConnectionRecord, String> ISP = createField("isp", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

	/**
	 * The column <code>charbot_0_1_0.connection.ip</code>.
	 */
	public final TableField<ConnectionRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR.length(45), this, "");

	/**
	 * The column <code>charbot_0_1_0.connection.exp_speed</code>.
	 */
	public final TableField<ConnectionRecord, Double> EXP_SPEED = createField("exp_speed", org.jooq.impl.SQLDataType.FLOAT, this, "");

	/**
	 * Create a <code>charbot_0_1_0.connection</code> table reference
	 */
	public Connection() {
		this("connection", null);
	}

	/**
	 * Create an aliased <code>charbot_0_1_0.connection</code> table reference
	 */
	public Connection(String alias) {
		this(alias, CONNECTION);
	}

	private Connection(String alias, Table<ConnectionRecord> aliased) {
		this(alias, aliased, null);
	}

	private Connection(String alias, Table<ConnectionRecord> aliased, Field<?>[] parameters) {
		super(alias, Charbot_0_1_0.CHARBOT_0_1_0, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ConnectionRecord, Integer> getIdentity() {
		return Keys.IDENTITY_CONNECTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ConnectionRecord> getPrimaryKey() {
		return Keys.KEY_CONNECTION_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ConnectionRecord>> getKeys() {
		return Arrays.<UniqueKey<ConnectionRecord>>asList(Keys.KEY_CONNECTION_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Connection as(String alias) {
		return new Connection(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Connection rename(String name) {
		return new Connection(name, null);
	}
}
