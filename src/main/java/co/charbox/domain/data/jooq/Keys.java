/**
 * This class is generated by jOOQ
 */
package co.charbox.domain.data.jooq;


import co.charbox.domain.data.jooq.tables.Connection;
import co.charbox.domain.data.jooq.tables.ConnectionInfo;
import co.charbox.domain.data.jooq.tables.DeviceAuth;
import co.charbox.domain.data.jooq.tables.DeviceConfigs;
import co.charbox.domain.data.jooq.tables.Devices;
import co.charbox.domain.data.jooq.tables.Heartbeat;
import co.charbox.domain.data.jooq.tables.Location;
import co.charbox.domain.data.jooq.tables.Outage;
import co.charbox.domain.data.jooq.tables.Ping;
import co.charbox.domain.data.jooq.tables.ServerAuth;
import co.charbox.domain.data.jooq.tables.SimpleLocation;
import co.charbox.domain.data.jooq.tables.Sst;
import co.charbox.domain.data.jooq.tables.TokenAuth;
import co.charbox.domain.data.jooq.tables.Udev;
import co.charbox.domain.data.jooq.tables.Users;
import co.charbox.domain.data.jooq.tables.Versions;
import co.charbox.domain.data.jooq.tables.records.ConnectionInfoRecord;
import co.charbox.domain.data.jooq.tables.records.ConnectionRecord;
import co.charbox.domain.data.jooq.tables.records.DeviceAuthRecord;
import co.charbox.domain.data.jooq.tables.records.DeviceConfigsRecord;
import co.charbox.domain.data.jooq.tables.records.DevicesRecord;
import co.charbox.domain.data.jooq.tables.records.HeartbeatRecord;
import co.charbox.domain.data.jooq.tables.records.LocationRecord;
import co.charbox.domain.data.jooq.tables.records.OutageRecord;
import co.charbox.domain.data.jooq.tables.records.PingRecord;
import co.charbox.domain.data.jooq.tables.records.ServerAuthRecord;
import co.charbox.domain.data.jooq.tables.records.SimpleLocationRecord;
import co.charbox.domain.data.jooq.tables.records.SstRecord;
import co.charbox.domain.data.jooq.tables.records.TokenAuthRecord;
import co.charbox.domain.data.jooq.tables.records.UdevRecord;
import co.charbox.domain.data.jooq.tables.records.UsersRecord;
import co.charbox.domain.data.jooq.tables.records.VersionsRecord;

import javax.annotation.Generated;

import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>charbot_0_1_0</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<ConnectionRecord, Integer> IDENTITY_CONNECTION = Identities0.IDENTITY_CONNECTION;
	public static final Identity<ConnectionInfoRecord, Integer> IDENTITY_CONNECTION_INFO = Identities0.IDENTITY_CONNECTION_INFO;
	public static final Identity<DevicesRecord, Integer> IDENTITY_DEVICES = Identities0.IDENTITY_DEVICES;
	public static final Identity<DeviceAuthRecord, Integer> IDENTITY_DEVICE_AUTH = Identities0.IDENTITY_DEVICE_AUTH;
	public static final Identity<DeviceConfigsRecord, Integer> IDENTITY_DEVICE_CONFIGS = Identities0.IDENTITY_DEVICE_CONFIGS;
	public static final Identity<HeartbeatRecord, Integer> IDENTITY_HEARTBEAT = Identities0.IDENTITY_HEARTBEAT;
	public static final Identity<LocationRecord, Integer> IDENTITY_LOCATION = Identities0.IDENTITY_LOCATION;
	public static final Identity<OutageRecord, Integer> IDENTITY_OUTAGE = Identities0.IDENTITY_OUTAGE;
	public static final Identity<PingRecord, Integer> IDENTITY_PING = Identities0.IDENTITY_PING;
	public static final Identity<ServerAuthRecord, Integer> IDENTITY_SERVER_AUTH = Identities0.IDENTITY_SERVER_AUTH;
	public static final Identity<SimpleLocationRecord, Integer> IDENTITY_SIMPLE_LOCATION = Identities0.IDENTITY_SIMPLE_LOCATION;
	public static final Identity<SstRecord, Integer> IDENTITY_SST = Identities0.IDENTITY_SST;
	public static final Identity<TokenAuthRecord, Integer> IDENTITY_TOKEN_AUTH = Identities0.IDENTITY_TOKEN_AUTH;
	public static final Identity<UdevRecord, Integer> IDENTITY_UDEV = Identities0.IDENTITY_UDEV;
	public static final Identity<UsersRecord, Integer> IDENTITY_USERS = Identities0.IDENTITY_USERS;
	public static final Identity<VersionsRecord, Integer> IDENTITY_VERSIONS = Identities0.IDENTITY_VERSIONS;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<ConnectionRecord> KEY_CONNECTION_PRIMARY = UniqueKeys0.KEY_CONNECTION_PRIMARY;
	public static final UniqueKey<ConnectionInfoRecord> KEY_CONNECTION_INFO_PRIMARY = UniqueKeys0.KEY_CONNECTION_INFO_PRIMARY;
	public static final UniqueKey<DevicesRecord> KEY_DEVICES_PRIMARY = UniqueKeys0.KEY_DEVICES_PRIMARY;
	public static final UniqueKey<DeviceAuthRecord> KEY_DEVICE_AUTH_PRIMARY = UniqueKeys0.KEY_DEVICE_AUTH_PRIMARY;
	public static final UniqueKey<DeviceAuthRecord> KEY_DEVICE_AUTH_DEVICE_ID_UNIQUE = UniqueKeys0.KEY_DEVICE_AUTH_DEVICE_ID_UNIQUE;
	public static final UniqueKey<DeviceConfigsRecord> KEY_DEVICE_CONFIGS_PRIMARY = UniqueKeys0.KEY_DEVICE_CONFIGS_PRIMARY;
	public static final UniqueKey<HeartbeatRecord> KEY_HEARTBEAT_PRIMARY = UniqueKeys0.KEY_HEARTBEAT_PRIMARY;
	public static final UniqueKey<LocationRecord> KEY_LOCATION_PRIMARY = UniqueKeys0.KEY_LOCATION_PRIMARY;
	public static final UniqueKey<OutageRecord> KEY_OUTAGE_PRIMARY = UniqueKeys0.KEY_OUTAGE_PRIMARY;
	public static final UniqueKey<PingRecord> KEY_PING_PRIMARY = UniqueKeys0.KEY_PING_PRIMARY;
	public static final UniqueKey<ServerAuthRecord> KEY_SERVER_AUTH_PRIMARY = UniqueKeys0.KEY_SERVER_AUTH_PRIMARY;
	public static final UniqueKey<ServerAuthRecord> KEY_SERVER_AUTH_SERVER_ID_UNIQUE = UniqueKeys0.KEY_SERVER_AUTH_SERVER_ID_UNIQUE;
	public static final UniqueKey<SimpleLocationRecord> KEY_SIMPLE_LOCATION_PRIMARY = UniqueKeys0.KEY_SIMPLE_LOCATION_PRIMARY;
	public static final UniqueKey<SstRecord> KEY_SST_PRIMARY = UniqueKeys0.KEY_SST_PRIMARY;
	public static final UniqueKey<TokenAuthRecord> KEY_TOKEN_AUTH_PRIMARY = UniqueKeys0.KEY_TOKEN_AUTH_PRIMARY;
	public static final UniqueKey<UdevRecord> KEY_UDEV_PRIMARY = UniqueKeys0.KEY_UDEV_PRIMARY;
	public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = UniqueKeys0.KEY_USERS_PRIMARY;
	public static final UniqueKey<UsersRecord> KEY_USERS_EMAIL_UNIQUE = UniqueKeys0.KEY_USERS_EMAIL_UNIQUE;
	public static final UniqueKey<VersionsRecord> KEY_VERSIONS_PRIMARY = UniqueKeys0.KEY_VERSIONS_PRIMARY;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------


	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<ConnectionRecord, Integer> IDENTITY_CONNECTION = createIdentity(Connection.CONNECTION, Connection.CONNECTION.ID);
		public static Identity<ConnectionInfoRecord, Integer> IDENTITY_CONNECTION_INFO = createIdentity(ConnectionInfo.CONNECTION_INFO, ConnectionInfo.CONNECTION_INFO.ID);
		public static Identity<DevicesRecord, Integer> IDENTITY_DEVICES = createIdentity(Devices.DEVICES, Devices.DEVICES.ID);
		public static Identity<DeviceAuthRecord, Integer> IDENTITY_DEVICE_AUTH = createIdentity(DeviceAuth.DEVICE_AUTH, DeviceAuth.DEVICE_AUTH.ID);
		public static Identity<DeviceConfigsRecord, Integer> IDENTITY_DEVICE_CONFIGS = createIdentity(DeviceConfigs.DEVICE_CONFIGS, DeviceConfigs.DEVICE_CONFIGS.ID);
		public static Identity<HeartbeatRecord, Integer> IDENTITY_HEARTBEAT = createIdentity(Heartbeat.HEARTBEAT, Heartbeat.HEARTBEAT.ID);
		public static Identity<LocationRecord, Integer> IDENTITY_LOCATION = createIdentity(Location.LOCATION, Location.LOCATION.ID);
		public static Identity<OutageRecord, Integer> IDENTITY_OUTAGE = createIdentity(Outage.OUTAGE, Outage.OUTAGE.ID);
		public static Identity<PingRecord, Integer> IDENTITY_PING = createIdentity(Ping.PING, Ping.PING.ID);
		public static Identity<ServerAuthRecord, Integer> IDENTITY_SERVER_AUTH = createIdentity(ServerAuth.SERVER_AUTH, ServerAuth.SERVER_AUTH.ID);
		public static Identity<SimpleLocationRecord, Integer> IDENTITY_SIMPLE_LOCATION = createIdentity(SimpleLocation.SIMPLE_LOCATION, SimpleLocation.SIMPLE_LOCATION.ID);
		public static Identity<SstRecord, Integer> IDENTITY_SST = createIdentity(Sst.SST, Sst.SST.ID);
		public static Identity<TokenAuthRecord, Integer> IDENTITY_TOKEN_AUTH = createIdentity(TokenAuth.TOKEN_AUTH, TokenAuth.TOKEN_AUTH.ID);
		public static Identity<UdevRecord, Integer> IDENTITY_UDEV = createIdentity(Udev.UDEV, Udev.UDEV.ID);
		public static Identity<UsersRecord, Integer> IDENTITY_USERS = createIdentity(Users.USERS, Users.USERS.ID);
		public static Identity<VersionsRecord, Integer> IDENTITY_VERSIONS = createIdentity(Versions.VERSIONS, Versions.VERSIONS.ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<ConnectionRecord> KEY_CONNECTION_PRIMARY = createUniqueKey(Connection.CONNECTION, Connection.CONNECTION.ID);
		public static final UniqueKey<ConnectionInfoRecord> KEY_CONNECTION_INFO_PRIMARY = createUniqueKey(ConnectionInfo.CONNECTION_INFO, ConnectionInfo.CONNECTION_INFO.ID);
		public static final UniqueKey<DevicesRecord> KEY_DEVICES_PRIMARY = createUniqueKey(Devices.DEVICES, Devices.DEVICES.ID);
		public static final UniqueKey<DeviceAuthRecord> KEY_DEVICE_AUTH_PRIMARY = createUniqueKey(DeviceAuth.DEVICE_AUTH, DeviceAuth.DEVICE_AUTH.ID);
		public static final UniqueKey<DeviceAuthRecord> KEY_DEVICE_AUTH_DEVICE_ID_UNIQUE = createUniqueKey(DeviceAuth.DEVICE_AUTH, DeviceAuth.DEVICE_AUTH.DEVICE_ID);
		public static final UniqueKey<DeviceConfigsRecord> KEY_DEVICE_CONFIGS_PRIMARY = createUniqueKey(DeviceConfigs.DEVICE_CONFIGS, DeviceConfigs.DEVICE_CONFIGS.ID);
		public static final UniqueKey<HeartbeatRecord> KEY_HEARTBEAT_PRIMARY = createUniqueKey(Heartbeat.HEARTBEAT, Heartbeat.HEARTBEAT.ID);
		public static final UniqueKey<LocationRecord> KEY_LOCATION_PRIMARY = createUniqueKey(Location.LOCATION, Location.LOCATION.ID);
		public static final UniqueKey<OutageRecord> KEY_OUTAGE_PRIMARY = createUniqueKey(Outage.OUTAGE, Outage.OUTAGE.ID);
		public static final UniqueKey<PingRecord> KEY_PING_PRIMARY = createUniqueKey(Ping.PING, Ping.PING.ID);
		public static final UniqueKey<ServerAuthRecord> KEY_SERVER_AUTH_PRIMARY = createUniqueKey(ServerAuth.SERVER_AUTH, ServerAuth.SERVER_AUTH.ID);
		public static final UniqueKey<ServerAuthRecord> KEY_SERVER_AUTH_SERVER_ID_UNIQUE = createUniqueKey(ServerAuth.SERVER_AUTH, ServerAuth.SERVER_AUTH.SERVER_ID);
		public static final UniqueKey<SimpleLocationRecord> KEY_SIMPLE_LOCATION_PRIMARY = createUniqueKey(SimpleLocation.SIMPLE_LOCATION, SimpleLocation.SIMPLE_LOCATION.ID);
		public static final UniqueKey<SstRecord> KEY_SST_PRIMARY = createUniqueKey(Sst.SST, Sst.SST.ID);
		public static final UniqueKey<TokenAuthRecord> KEY_TOKEN_AUTH_PRIMARY = createUniqueKey(TokenAuth.TOKEN_AUTH, TokenAuth.TOKEN_AUTH.ID);
		public static final UniqueKey<UdevRecord> KEY_UDEV_PRIMARY = createUniqueKey(Udev.UDEV, Udev.UDEV.ID);
		public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = createUniqueKey(Users.USERS, Users.USERS.ID);
		public static final UniqueKey<UsersRecord> KEY_USERS_EMAIL_UNIQUE = createUniqueKey(Users.USERS, Users.USERS.EMAIL);
		public static final UniqueKey<VersionsRecord> KEY_VERSIONS_PRIMARY = createUniqueKey(Versions.VERSIONS, Versions.VERSIONS.ID);
	}
}
