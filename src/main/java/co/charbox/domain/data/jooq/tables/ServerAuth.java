/**
 * This class is generated by jOOQ
 */
package co.charbox.domain.data.jooq.tables;


import co.charbox.domain.data.jooq.Charbot_0_1_0;
import co.charbox.domain.data.jooq.Keys;
import co.charbox.domain.data.jooq.tables.records.ServerAuthRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerAuth extends TableImpl<ServerAuthRecord> {

	private static final long serialVersionUID = -1078750412;

	/**
	 * The reference instance of <code>charbot_0_1_0.server_auth</code>
	 */
	public static final ServerAuth SERVER_AUTH = new ServerAuth();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ServerAuthRecord> getRecordType() {
		return ServerAuthRecord.class;
	}

	/**
	 * The column <code>charbot_0_1_0.server_auth.id</code>.
	 */
	public final TableField<ServerAuthRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>charbot_0_1_0.server_auth.server_id</code>.
	 */
	public final TableField<ServerAuthRecord, String> SERVER_ID = createField("server_id", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

	/**
	 * The column <code>charbot_0_1_0.server_auth.service_name</code>.
	 */
	public final TableField<ServerAuthRecord, String> SERVICE_NAME = createField("service_name", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

	/**
	 * The column <code>charbot_0_1_0.server_auth.key</code>.
	 */
	public final TableField<ServerAuthRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

	/**
	 * The column <code>charbot_0_1_0.server_auth.activated</code>.
	 */
	public final TableField<ServerAuthRecord, Byte> ACTIVATED = createField("activated", org.jooq.impl.SQLDataType.TINYINT.defaulted(true), this, "");

	/**
	 * Create a <code>charbot_0_1_0.server_auth</code> table reference
	 */
	public ServerAuth() {
		this("server_auth", null);
	}

	/**
	 * Create an aliased <code>charbot_0_1_0.server_auth</code> table reference
	 */
	public ServerAuth(String alias) {
		this(alias, SERVER_AUTH);
	}

	private ServerAuth(String alias, Table<ServerAuthRecord> aliased) {
		this(alias, aliased, null);
	}

	private ServerAuth(String alias, Table<ServerAuthRecord> aliased, Field<?>[] parameters) {
		super(alias, Charbot_0_1_0.CHARBOT_0_1_0, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ServerAuthRecord, Integer> getIdentity() {
		return Keys.IDENTITY_SERVER_AUTH;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ServerAuthRecord> getPrimaryKey() {
		return Keys.KEY_SERVER_AUTH_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ServerAuthRecord>> getKeys() {
		return Arrays.<UniqueKey<ServerAuthRecord>>asList(Keys.KEY_SERVER_AUTH_PRIMARY, Keys.KEY_SERVER_AUTH_SERVER_ID_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ServerAuth as(String alias) {
		return new ServerAuth(alias, this);
	}

	/**
	 * Rename this table
	 */
	public ServerAuth rename(String name) {
		return new ServerAuth(name, null);
	}
}
